@Library('test-shared-library') _

def NODE_LABEL = 'master'

def pipelineContext = null
def result = 'FAILURE'

try {
    ansiColor('xterm') {
        timestamps {

            node(NODE_LABEL) {
                def insideDocker = null

                env.BUILD_NUMBER_DIR = currentBuild.number
                env.DATA_DIR = "/home/0xdiag"

                env.GRADLE_OPTS = "-Xmx4g -XX:MaxPermSize=512m"

                env.PYTHON_VERSION = '3.6'
                env.R_VERSION = '3.4.1'

                sh 'printenv | sort'

                final String CHECKOUT_STAGE_NAME = 'Checkout'
                stage(CHECKOUT_STAGE_NAME) {

                    def scmEnv = null
                    dir(env.BUILD_NUMBER_DIR) {
                        deleteDir()
                        retryWithTimeout(60, 5) {
                            scmEnv = checkout scm
                        }

                        env.THIS_BUILD_GIT_HASH_LONG = sh(script: 'git rev-parse --verify HEAD', returnStdout: true).trim()
                        env.THIS_BUILD_GIT_HASH_SHORT = sh(script: 'git describe --always', returnStdout: true).trim()
                    }

                    insideDocker = load("${env.BUILD_NUMBER_DIR}/scripts/jenkins/groovy/insideDocker.groovy")

                    def pipelineContextFactory = load("${env.BUILD_NUMBER_DIR}/scripts/jenkins/groovy/pipelineContext.groovy")
                    pipelineContext = pipelineContextFactory(env.BUILD_NUMBER_DIR, 'MODE_RELEASE', scmEnv, true)
                    env.BRANCH_NAME = env.BRANCH_NAME.replaceAll('/', '_')

                    pipelineContext.getBuildSummary().addStageSummary(this, CHECKOUT_STAGE_NAME, env.BUILD_NUMBER_DIR)

                    setReleaseJobProperties(pipelineContext)

                    pipelineContext.getBuildSummary().addDetailsSection(this)
                    final String version = sh(script: "cd ${env.BUILD_NUMBER_DIR} && cat gradle.properties | grep -Eo 'version=[0-9\\.]+' | grep -Eo '[0-9\\.]+'", returnStdout: true).trim()
                    String releaseContent = """
                        <ul>
                            <li><strong>Version:</strong> ${version}.${currentBuild.number}</li>
                            <li><strong>Node:</strong> ${env.NODE_NAME}</li>
                            <li><strong>Test Release:</strong> ${params.TEST_RELEASE}</li>
                            <li><strong>Nexus Upload:</strong> ${params.UPLOAD_NEXUS}</li>
                            <li><strong>PyPI Upload:</strong> ${params.UPLOAD_PYPI}</li>
                            <li><strong>Build Conda:</strong> ${params.BUILD_CONDA}</li>
                            <li><strong>Anaconda Upload:</strong> ${params.UPLOAD_TO_ANACONDA}</li>
                            <li><strong>Update Top-level Latest Links</strong> ${params.UPDATE_LATEST}</li>
                            <li><strong>Update Branch Latest Links</strong> ${params.UPDATE_LATEST_BRANCH}</li>
                            <li><strong>Publish H2O K8S Docker image:</strong> ${params.BUILD_H2O_DOCKER}</li>
                            <li><strong>S3 Root:</strong> ${env.S3_ROOT}</li>
                        </ul>
                    """
                    pipelineContext.getBuildSummary().addSection(this, 'release', 'Release', releaseContent)

                    pipelineContext.getBuildSummary().setStageDetails(this, CHECKOUT_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                    pipelineContext.getBuildSummary().markStageSuccessful(this, CHECKOUT_STAGE_NAME)
                }

                final String BUILD_STAGE_NAME = 'Build'
                stage(BUILD_STAGE_NAME) {
                    try {
                        pipelineContext.getBuildSummary().addStageSummary(this, BUILD_STAGE_NAME, env.BUILD_NUMBER_DIR)
                        pipelineContext.getBuildSummary().setStageDetails(this, BUILD_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                        withCredentials([file(credentialsId: 'release-gradle.properties', variable: 'GRADLE_PROPERTIES_PATH'), file(credentialsId: 'release-secret-key-ring-file', variable: 'RING_FILE_PATH')]) {
                            insideDocker([], pipelineContext.getBuildConfig().getReleaseImage(), pipelineContext.getBuildConfig().DOCKER_REGISTRY, pipelineContext.getBuildConfig(), 2, 'HOURS', "-v ${GRADLE_PROPERTIES_PATH}:${GRADLE_PROPERTIES_PATH} -v ${RING_FILE_PATH}:${RING_FILE_PATH}") {
                                printReleaseConfiguration(pipelineContext)
                                sh """
                                # Log commands.
                                set -x
                                # Stop on error.
                                set -e

                                export BUILD_HADOOP=true
                                export JAVA_HOME=/usr/lib/jvm/java-8-oracle
                                echo "Activating Python ${env.PYTHON_VERSION}"
                                . /envs/h2o_env_python${env.PYTHON_VERSION}/bin/activate

                                mkdir -p ${env.BUILD_NUMBER_DIR}
                                cd ${env.BUILD_NUMBER_DIR}

                                # Log some stuff for debug purposes.
                                date
                                pwd
                                env
                                echo \$PATH
                                which java
                                java -version
                                du -h

                                # Update the build number.
                                mkdir -p ci
                                echo "BUILD_NUMBER=${currentBuild.number}" > gradle/buildnumber.properties
                                echo "BUILD_BRANCH_NAME=${env.BRANCH_NAME}" > gradle/git.properties
                                echo "BUILD_HASH=${env.THIS_BUILD_GIT_HASH_LONG}" >> gradle/git.properties
                                echo "BUILD_HASH_SHORT=${env.THIS_BUILD_GIT_HASH_SHORT}" >> gradle/git.properties

                                # Log some git stuff for debug purposes.
                                echo
                                echo GIT INFO
                                echo
                                git branch | grep '*' | sed 's/* //'
                                git log -1 --format="%H"
                                git describe --always --dirty
                                git status

                                # Do the build.
                                if [ -n "${env.DATA_DIR}" ]; then
                                    rm -f -r smalldata
                                    ln -s "${env.DATA_DIR}/smalldata"
                                    rm -f -r bigdata
                                    ln -s "${env.DATA_DIR}/bigdata"
                                else
                                    ./gradlew syncSmalldata
                                fi
                                if [ \$DO_RELEASE ]; then
                                    echo 'Copy gradle properties and modify gradle.properties'
                                    cp ${GRADLE_PROPERTIES_PATH} \$GRADLE_USER_HOME/gradle.properties
                                    chmod +w \$GRADLE_USER_HOME/gradle.properties
                                    echo "signing.secretKeyRingFile=${RING_FILE_PATH}" >> \$GRADLE_USER_HOME/gradle.properties
                                    chmod -w \$GRADLE_USER_HOME/gradle.properties
                                fi
                                ./gradlew build -x test
                            """
                            }
                        }
                        pipelineContext.getBuildSummary().markStageSuccessful(this, BUILD_STAGE_NAME)
                    } catch (Exception e) {
                        pipelineContext.getBuildSummary().markStageFailed(this, BUILD_STAGE_NAME)
                        throw e
                    }
                }

                env.PROJECT_VERSION = sh(script: "cd ${env.BUILD_NUMBER_DIR} && cat target/project_version", returnStdout: true).trim()
                env.SHA256_HASH = sh(script: "cd ${env.BUILD_NUMBER_DIR} && sha256sum target/h2o-*${currentBuild.number}.zip", returnStdout: true).trim()

                    if (params.BUILD_CONDA) {
                        final def pyVersions = pipelineContext.getBuildConfig().PYTHON_VERSIONS.findAll { Double.parseDouble(it) >= 3.6 }

                        // build for all Python versions
                        for (pyVersion in pyVersions) {
                            def uploadToCondaStageName = "Build Py${pyVersion} Conda Packages"
                            stage(uploadToCondaStageName) {
                                withCredentials([usernamePassword(credentialsId: 'anaconda-credentials', usernameVariable: 'ANACONDA_USERNAME', passwordVariable: 'ANACONDA_PASSWORD')]) {
                                    pipelineContext.getBuildSummary().addStageSummary(this, uploadToCondaStageName, env.BUILD_NUMBER_DIR)
                                    pipelineContext.getBuildSummary().setStageDetails(this, uploadToCondaStageName, env.NODE_NAME, env.WORKSPACE)
                                    try {
                                        insideDocker([], pipelineContext.getBuildConfig().getReleaseImage(), pipelineContext.getBuildConfig().DOCKER_REGISTRY, pipelineContext.getBuildConfig(), 2, 'HOURS') {
                                            sh """
                                                export CONDA_PKGS_DIRS=${env.BUILD_NUMBER_DIR}/h2o-py/build/conda_cache
                                                mkdir -p \$CONDA_PKGS_DIRS
                                                cp -r ${env.BUILD_NUMBER_DIR}/h2o-py/conda ${env.BUILD_NUMBER_DIR}/h2o-py/build/main
                                                cd ${env.BUILD_NUMBER_DIR}/h2o-py/build/main/conda
                                                # Create conda package for current platform
                                                conda config --append channels conda-forge
                                                conda build h2o --output-folder "." --no-anaconda-upload --py ${pyVersion}
                                                # Get name of the package
                                                CONDA_PKG_CURRENT_ARCH_PATH=\$(conda build h2o --py ${pyVersion} --output-folder "." --output | tail -1)
                                                PKG_NAME=\$(basename \$CONDA_PKG_CURRENT_ARCH_PATH)
                                                # Convert conda package for all other platforms
                                                conda convert \$CONDA_PKG_CURRENT_ARCH_PATH -p all
                                            """
                                        }
                                        pipelineContext.getBuildSummary().markStageSuccessful(this, uploadToCondaStageName)
                                    } catch (Exception e) {
                                        pipelineContext.getBuildSummary().markStageFailed(this, uploadToCondaStageName)
                                        throw e
                                    }
                                }
                            }
                        }
                    }

                final String CLEANUP_STAGE_NAME = 'Cleanup'
                stage(CLEANUP_STAGE_NAME) {
                    try {
                        pipelineContext.getBuildSummary().addStageSummary(this, CLEANUP_STAGE_NAME, env.BUILD_NUMBER_DIR)
                        pipelineContext.getBuildSummary().setStageDetails(this, CLEANUP_STAGE_NAME, env.NODE_NAME, env.WORKSPACE)
                        sh """
                            cd ${env.BUILD_NUMBER_DIR}
                            rm -rf target/*.zip
                            rm -rf h2o-dist
                            find . -name 'h2odriver-3.*.0.jar' -delete -print
                        """
                        pipelineContext.getBuildSummary().markStageSuccessful(this, CLEANUP_STAGE_NAME)
                    } catch (Exception e) {
                        pipelineContext.getBuildSummary().markStageFailed(this, CLEANUP_STAGE_NAME)
                        throw e
                    }
                }
            }
        }
    }
    result = 'SUCCESS'
} finally {
    if (pipelineContext != null) {
        pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this), getRelevantRecipients(pipelineContext, result))
    }
}

private setReleaseJobProperties(final pipelineContext) {

    def TEST_RELEASE_BUCKET = 's3://test.0xdata.com/test-release/h2o'
    def RELEASE_BUCKET = 's3://h2o-release/h2o'

    final boolean isReleaseBranch = env.BRANCH_NAME.startsWith(pipelineContext.getBuildConfig().RELEASE_BRANCH_PREFIX)

    def jobProperties = [
        disableConcurrentBuilds(),
        parameters([
            booleanParam(defaultValue: !isReleaseBranch && env.BRANCH_NAME != 'master', description: "If set don't upload to PyPI and Conda, just build the packages if required; also push to ${TEST_RELEASE_BUCKET} instead of ${RELEASE_BUCKET}", name: 'TEST_RELEASE'),
            booleanParam(defaultValue: isReleaseBranch && !params.TEST_RELEASE, description: 'If set, update top-level latest links and latest DOCKER tag', name: 'UPDATE_LATEST'),
            booleanParam(defaultValue: true, description: 'If set, update latest links for this branch', name: 'UPDATE_LATEST_BRANCH'),
            booleanParam(defaultValue: isReleaseBranch && !params.TEST_RELEASE, description: 'If set, publish to Nexus', name: 'UPLOAD_NEXUS'),
            booleanParam(defaultValue: isReleaseBranch && !params.TEST_RELEASE, description: 'If set build PyPI package. Also if building rel- branch, publish to PyPI', name: 'UPLOAD_PYPI'),
            booleanParam(defaultValue: true, description: 'If set build conda packages and upload them to S3', name: 'BUILD_CONDA'),
            booleanParam(defaultValue: false, description: 'If set and building rel- branch, publish to Anaconda.', name: 'UPLOAD_TO_ANACONDA'),
            booleanParam(defaultValue: true, description: 'If set, build H2O Docker image and push to H2O official docker hub.', name: 'BUILD_H2O_DOCKER')
        ])
    ]
    if (env.BRANCH_NAME == 'master') {
        // in case of master branch enable the periodical builds and buildDiscarder
        jobProperties += pipelineTriggers(
            [cron('30 23 * * *')]
        )
        jobProperties += buildDiscarder(
            logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '25')
        )

    }
    properties(jobProperties)

    if (!params.TEST_RELEASE && (env.BRANCH_NAME == 'master' || isReleaseBranch)) {
        env.S3_ROOT = RELEASE_BUCKET
    } else {
        env.S3_ROOT = TEST_RELEASE_BUCKET
    }
    echo "Release will be pushed to ${env.S3_ROOT}"

    if (env.BRANCH_NAME == 'master') {
        // we are building nightly build
        env.NIGHTLY_BUILD = true
    } else if (params.TEST_RELEASE || isReleaseBranch) {
        // in case of release branch and enabled upload to Maven, we have to set DO_RELEASE
        if (params.UPLOAD_NEXUS) {
            env.DO_RELEASE = true
        }
    }
    sh "printenv | sort"
}

private printReleaseConfiguration(final pipelineContext) {
    echo """
=======================================
Configuration:
---------------------------------------
    SHA:                    | ${env.GIT_SHA}
    Branch:                 | ${env.BRANCH_NAME}
    Docker Image:           | ${pipelineContext.getBuildConfig().getReleaseImage()}
    Test Release:           | ${params.TEST_RELEASE}
    S3 Bucket:              | ${env.S3_ROOT}
    Publish to Nexus:       | ${params.UPLOAD_NEXUS}
    Publish to PyPI:        | ${params.UPLOAD_PYPI}
    Publish to Conda:       | ${params.UPLOAD_CONDA}
    Publish to Docker Hub   | ${params.BUILD_H2O_DOCKER}
=======================================
"""
}

/**
 * Creates Python script which checks if h2o module is of expected version. Script is saved in $(pwd)/h2o_test.py
 * @param projectVersion expected h2o module version, like 3.16.0.2
 */
private prepareH2OVersionCheckScript(final String projectVersion) {
    sh """
echo '
import h2o
actual_version = h2o.__version__
expected_version = "${projectVersion}"
assert actual_version == expected_version, "Version should be %s but was %s" % (expected_version, actual_version)
h2o.init()
' > h2o_test.py
"""
}

private getRelevantRecipients(final pipelineContext, final String result) {
    def RELEASE_NIGHTLY_ALWAYS_RECIPIENTS = ['michalr@h2o.ai']
    def RELEASE_NIGHTLY_FAILURE_RECIPIENTS = ['michalk@h2o.ai', 'anmol@h2o.ai'] + RELEASE_NIGHTLY_ALWAYS_RECIPIENTS
    def RELEASE_ALWAYS_RECIPIENTS = ['michalk@h2o.ai', 'anmol@h2o.ai', 'michalr@h2o.ai']
    def RELEASE_FAILURE_RECIPIENTS = [] + RELEASE_ALWAYS_RECIPIENTS

    if (params.TEST_RELEASE) {
        return ['michalr@h2o.ai']
    }
    if (result.toLowerCase() == pipelineContext.getBuildSummary().RESULT_SUCCESS) {
        if (env.NIGHTLY_BUILD != null && env.NIGHTLY_BUILD.toLowerCase() == 'true') {
            return RELEASE_NIGHTLY_ALWAYS_RECIPIENTS
        }
        return RELEASE_ALWAYS_RECIPIENTS
    }
    if (env.NIGHTLY_BUILD != null && env.NIGHTLY_BUILD.toLowerCase() == 'true') {
        return RELEASE_NIGHTLY_FAILURE_RECIPIENTS
    }
    return RELEASE_FAILURE_RECIPIENTS
}
